"use strict";

var Timetable = function () {
    this.scope = { hourStart: 8, hourEnd: 18 };
    this.locations = [];
    this.timeslots = [];
};

Timetable.Renderer = function (timetable) {
    if (!(timetable instanceof Timetable)) throw new Error("Initialize renderer using a Timetable");
    this.timetable = timetable;
};

(function () {
    function isValidHour(hour) {
        return isInteger(hour) && isWithin24Hours(hour);
    }

    function isInteger(value) {
        return value === parseInt(value, 10);
    }

    function isWithin24Hours(hour) {
        return hour >= 0 && hour < 24;
    }

    function isInArray(value, array) {
        return array.indexOf(value) !== -1;
    }

    function isValidDateRange(startDate, endDate) {
        var isDate = startDate instanceof Date && endDate instanceof Date;
        var isEndAfterStart = endDate > startDate;
        return isDate && isEndAfterStart;
    }

    function clearElement(element) {
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }

    function formatHour(hour) {
        var prefix = hour < 10 ? "0" : "";
        return prefix + hour + ":00";
    }

    Timetable.prototype = {
        setScope: function (startHour, endHour) {
            if (!isValidHour(startHour) || !isValidHour(endHour)) {
                throw new RangeError("Timetable scope should consist of (start, end) in whole hours from 0 to 23");
            }
            this.scope.hourStart = startHour;
            this.scope.hourEnd = endHour;
            return this;
        },

        addLocations: function (locations) {
            if (!Array.isArray(locations)) {
                throw new Error("Tried to add locations in wrong format");
            }
            var existingLocations = this.locations;
            locations.forEach(function (location) {
                if (isInArray(location, existingLocations)) {
                    throw new Error("Location already exists");
                }
                existingLocations.push(location);
            });
            return this;
        },

        addTimeslot: function (timeslotId, name, location, startDate, endDate, actor, description, url, actions) {
            if (!isInArray(location, this.locations)) {
                throw new Error("Unknown location");
            }
            if (!isValidDateRange(startDate, endDate)) {
                throw new Error("Invalid time range: " + JSON.stringify([startDate, endDate]));
            }
            this.timeslots.push({
                timeslotId: timeslotId,
                name: name,
                location: location,
                startDate: startDate,
                endDate: endDate,
                actor: actor,
                description: description,
                url: url,
                actions: actions || [] // Array of action objects: {label: string, callback: function, class: string}
            });
            return this;
        }
    };

  Timetable.Renderer.prototype = {
    draw: function (containerSelector) {
        function calculateScopeDuration(startHour, endHour) {
            return endHour > startHour ? endHour - startHour : 24 + endHour - startHour;
        }

        function validateContainer(container) {
            if (container === null) {
                throw new Error("Timetable container not found");
            }
        }

        function createSidebar(container) {
            var aside = container.appendChild(document.createElement("aside"));
            var ul = aside.appendChild(document.createElement("ul"));
            renderLocations(ul);
        }

        function renderLocations(ul) {
            for (var i = 0; i < timetable.locations.length; i++) {
                var li = ul.appendChild(document.createElement("li"));
                var span = li.appendChild(document.createElement("span"));
                span.className = "row-heading";
                span.textContent = timetable.locations[i];
            }
        }

        function createTimeline(container) {
            var section = container.appendChild(document.createElement("section"));
            var time = section.appendChild(document.createElement("time"));
            renderTimeHeader(time);
            renderRoomTimeline(time);
        }

        function renderTimeHeader(time) {
            var header = time.appendChild(document.createElement("header"));
            var ul = header.appendChild(document.createElement("ul"));
            var isEndReached = false;
            var isMidnightCrossed = false;

            for (var hour = timetable.scope.hourStart; !isEndReached; ) {
                var li = ul.appendChild(document.createElement("li"));
                var span = li.appendChild(document.createElement("span"));
                span.className = "time-label";
                span.textContent = formatHour(hour);

                if (hour === timetable.scope.hourEnd && (timetable.scope.hourStart !== timetable.scope.hourEnd || !isMidnightCrossed)) {
                    isEndReached = true;
                }
                if (++hour === 24) {
                    hour = 0;
                    isMidnightCrossed = true;
                }
            }
        }

        function renderRoomTimeline(time) {
            var ul = time.appendChild(document.createElement("ul"));
            ul.className = "room-timeline";

            // Track the maximum number of rows for each location
            var maxRowsPerLocation = {};

            for (var i = 0; i < timetable.locations.length; i++) {
                var location = timetable.locations[i];
                var li = ul.appendChild(document.createElement("li"));
                var eventRows = renderTimeslotsForLocation(location, li);

                // Store the maximum number of rows for this location
                maxRowsPerLocation[location] = eventRows.length;
            }

            // Adjust the height of row-headings (at the <li> level) based on the maximum rows
            adjustRowHeadingsHeight(maxRowsPerLocation);
        }

        function renderTimeslotsForLocation(location, container) {
            var eventsForLocation = timetable.timeslots.filter(function (timeslot) {
                return timeslot.location === location;
            });

            // Sort timeslots by start time
            eventsForLocation.sort(function (a, b) {
                return a.startDate - b.startDate;
            });

            // Track overlapping timeslots
            var eventRows = [];
            for (var i = 0; i < eventsForLocation.length; i++) {
                var timeslot = eventsForLocation[i];
                var rowIndex = findAvailableRow(timeslot, eventRows);
                if (rowIndex === -1) {
                    rowIndex = eventRows.length;
                    eventRows.push([]);
                }
                eventRows[rowIndex].push(timeslot);
                renderTimeslot(timeslot, container, rowIndex);
            }

            // Adjust container height based on the number of rows
            if (eventRows.length > 1) {
                var height = eventRows.length * 60; // 40px per row
                container.style.height = height + "px";
            }

            return eventRows;
        }

        function findAvailableRow(timeslot, eventRows) {
            for (var i = 0; i < eventRows.length; i++) {
                var isAvailable = true;
                for (var j = 0; j < eventRows[i].length; j++) {
                    var existingTimeslot = eventRows[i][j];
                    if (eventsOverlap(timeslot, existingTimeslot)) {
                        isAvailable = false;
                        break;
                    }
                }
                if (isAvailable) {
                    return i;
                }
            }
            return -1; // No available row, create a new one
        }

        function eventsOverlap(event1, event2) {
            return event1.startDate < event2.endDate && event1.endDate > event2.startDate;
        }

        function renderTimeslot(timeslot, container, rowIndex) {
            var elementType = timeslot.url ? "a" : "div";
            var eventElement = container.appendChild(document.createElement(elementType));
            var contentWrapper = eventElement.appendChild(document.createElement("div"));
            contentWrapper.className = "time-entry-content";
            
            // Main content
            var titleElement = contentWrapper.appendChild(document.createElement("small"));
            var descriptionElement = contentWrapper.appendChild(document.createElement("small"));
            var actorElement = contentWrapper.appendChild(document.createElement("small"));
            
            // Actions container (only if there are actions)
            if (timeslot.actions && timeslot.actions.length > 0) {
                var actionsContainer = eventElement.appendChild(document.createElement("div"));
                actionsContainer.className = "time-entry-actions";
                
                timeslot.actions.forEach(function(action) {
                    var actionBtn = actionsContainer.appendChild(document.createElement("button"));
                    actionBtn.textContent = action.label;
                    actionBtn.className = "time-entry-action " + (action.class || "");
                    actionBtn.addEventListener("click", function(e) {
                        e.stopPropagation();
                        action.callback(timeslot);
                    });
                });
            }
        
            eventElement.title = timeslot.name;
            if (timeslot.url) {
                eventElement.href = timeslot.url;
            }
            eventElement.className = "time-entry";
            eventElement.setAttribute('data-id', timeslot.timeslotId);
            eventElement.style.width = calculateTimeslotWidth(timeslot);
            eventElement.style.left = calculateTimeslotPosition(timeslot);
            eventElement.style.top = (rowIndex * 60) + "px";
           
            titleElement.textContent = timeslot.name;
            descriptionElement.textContent = timeslot.description ?? '';
            actorElement.textContent = `${timeslot.actor ?? ''}`;
            
            // Add hover effect to show actions
            eventElement.addEventListener("mouseenter", function() {
                if (actionsContainer) {
                    actionsContainer.style.opacity = "1";
                    actionsContainer.style.visibility = "visible";
                }
            });
            
            eventElement.addEventListener("mouseleave", function() {
                if (actionsContainer) {
                    actionsContainer.style.opacity = "0";
                    actionsContainer.style.visibility = "hidden";
                }
            });
        }

        function calculateTimeslotWidth(timeslot) {
            var start = timeslot.startDate;
            var end = timeslot.endDate;
            var duration = calculateTimeslotDuration(start, end);
            return (duration / scopeDuration) * 100 + "%";
        }

        function calculateTimeslotDuration(start, end) {
            return (end.getTime() - start.getTime()) / 1000 / 60 / 60;
        }

        function calculateTimeslotPosition(timeslot) {
            var start = timeslot.startDate;
            var hours = start.getHours() + start.getMinutes() / 60;
            return ((hours - timetable.scope.hourStart) / scopeDuration) * 100 + "%";
        }

        function adjustRowHeadingsHeight(maxRowsPerLocation) {
            var rowHeadings = document.querySelectorAll("aside ul li"); // Select <li> elements in the sidebar
            rowHeadings.forEach(function (rowHeading, index) {
                var location = timetable.locations[index];
                var maxRows = maxRowsPerLocation[location] || 1; // Default to 1 row if no timeslots
                var height = maxRows * 60; // 60px per row
                rowHeading.style.height = height + "px";
            });
        }

        var timetable = this.timetable;
        var scopeDuration = calculateScopeDuration(timetable.scope.hourStart, timetable.scope.hourEnd);
        var container = document.querySelector(containerSelector);

        validateContainer(container);
        clearElement(container);
        createSidebar(container);
        createTimeline(container);
    }
};
})();